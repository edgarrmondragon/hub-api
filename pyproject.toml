[project]
name = "hub-api"
dynamic = ["version"]
description = "API for hub.meltano.com"
authors = [
    { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiosqlite>=0.19.0",
    "fastapi>=0.109.2",
    "granian[reload]>=1.6.0",
    "SQLAlchemy[asyncio]>=2.0.27",
    "starlette>=0.38.5",
    "python-json-logger>=2.0.7",
]

[dependency-groups]
build = [
    "platformdirs>=4.3.6",
    "PyYAML>=6.0.1",
    "requests>=2.32.3",
]
dev = [
    { include-group = "build" },
    { include-group = "tests" },
    { include-group = "typing" },
]
tests = [
    "coverage>=7.6.1",
    "httpx>=0.27.2",
    "pytest>=8.3.2",
    "pytest-asyncio>=0.24",
    "pytest-github-actions-annotate-failures>=0.3.0",
]
typing = [
    "mypy>=1.14.0",
    "types-PyYAML>=6.0.12.20240808",
    "types-requests>=2.32.0",
]

[tool.hatch.version]
fallback-version = "0.0.0.dev0"
source = "vcs"

[tool.uv]
prerelease = "allow"
preview = true
required-version = ">=0.5.19"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = ["COM812"]
select = [
    "F",     # PyFlakes
    "W",     # pycodestyle (Warning)
    "E",     # pycodestyle (Error)
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "ICN",   # flake8-import-conventions
    "PT",    # flake8-pytest-style
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TC" ,   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "FAST",  # FastAPI
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["sqlalchemy"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"sqlalchemy" = "sa"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
addopts = [
    "--durations=5",
    "-ra",
    "--strict-config",
    "--strict-markers",
]
asyncio_default_fixture_loop_scope = "session"
filterwarnings = ["error"]
log_cli_level = "INFO"
minversion = "8"
testpaths = ["tests"]
xfail_strict = true

[tool.mypy]
enable_error_code = ["explicit-override", "ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = false
warn_redundant_casts = true

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_also = [
  '''if (t\.)?TYPE_CHECKING:''',
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
