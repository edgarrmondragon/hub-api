[project]
name = "hub-api"
version = "0.1.0"
description = "API for hub.meltano.com"
authors = [
    { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.14"
dependencies = [
    "aiosqlite>=0.19.0",
    "fastapi>=0.109.2",
    "granian[reload]>=1.6.0",
    "packaging>=25.0",
    "pydantic>=2.12.0a1",
    "python-json-logger>=4.0.0.dev0",
    "SQLAlchemy[asyncio]>=2.0.27",
    "starlette>=0.38.5",
]

[dependency-groups]
build = ["platformdirs>=4.3.6", "PyYAML>=6.0.1", "requests>=2.32.3"]
coverage = ["coverage>=7.6.1"]
dev = [
    { include-group = "build" },
    { include-group = "tests" },
    { include-group = "typing" },
    "python-dotenv>=1.1.1",
]
lint = ["ruff>=0.12.9"]
tests = [
    { include-group = "coverage" },
    "faker>=37.12.0",
    "httpx>=0.27.2",
    "pytest>=8.3.2",
    "pytest-asyncio>=1.1.0a1",
    "pytest-github-actions-annotate-failures>=0.3.0",
    "syrupy>=5.0.0",
]
typing = [
    { include-group = "build" },
    { include-group = "tests" },
    "mypy>=1.17.0",
    "ty>=0.0.1a19",
    "types-PyYAML>=6.0.12.20240808",
    "types-requests>=2.32.0",
]

[tool.uv]
preview = true
required-version = ">=0.8.0"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = ["COM812"]
select = [
    "F",     # PyFlakes
    "W",     # pycodestyle (Warning)
    "E",     # pycodestyle (Error)
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "ICN",   # flake8-import-conventions
    "PT",    # flake8-pytest-style
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TC",    # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "FAST",  # FastAPI
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["sqlalchemy"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"sqlalchemy" = "sa"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
addopts = ["--durations=5", "-ra", "--strict-config", "--strict-markers"]
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    "error",
]
log_cli_level = "INFO"
minversion = "8"
testpaths = ["tests"]
xfail_strict = true

[tool.mypy]
enable_error_code = [
    "explicit-override",
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "exhaustive-match",    # https://mypy.readthedocs.io/en/stable/error_code_list2.html#check-that-match-statements-match-exhaustively-exhaustive-match
]
strict = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = false
warn_redundant_casts = true

[tool.coverage.run]
branch = true
parallel = true

[tool.tox]
min_version = "4.22"
requires = ["tox", "tox-uv"]
env_list = [
    "format",
    "build",
    "py314",
    "combine",
    "coverage",
    "lint",
    "typing",
]

[tool.tox.env_run_base]
description = "run unit tests"
runner = "uv-venv-lock-runner"
dependency_groups = ["tests"]
commands = [
    [
        "coverage",
        "run",
        "-m",
        "pytest",
        { replace = "posargs", default = [
            "-v",
        ], extend = true },
    ],
]

[tool.tox.env.format]
description = "format code"
dependency_groups = ["lint"]
commands = [
    [
        "ruff",
        "check",
        "--fix",
        { replace = "posargs", default = [
        ], extend = true },
    ],
    [
        "ruff",
        "format",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.lint]
description = "lint code"
dependency_groups = ["lint"]
depends = ["format"]
commands = [
    [
        "ruff",
        "check",
        { replace = "posargs", default = [
        ], extend = true },
    ],
    [
        "ruff",
        "format",
        "--diff",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.typing]
description = "run type checking"
dependency_groups = ["typing"]
commands = [
    [
        "mypy",
        { replace = "posargs", default = [
            "src",
            "tests",
            "build.py",
        ], extend = true },
    ],
    [
        "ty",
        "check",
        { replace = "posargs", default = [
            "src",
            "tests",
            "build.py",
        ], extend = true },
    ],
]

[tool.tox.env.build]
description = "build the plugin database"
dependency_groups = ["build"]
commands = [
    [
        "python",
        "-I",
        "build.py",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.py314]
depends = ["build"]

[tool.tox.env.combine]
description = "combine coverage reports"
skip_install = true
dependency_groups = [ "coverage" ]
depends = ["py314"]
commands = [[ "coverage", "combine" ]]

[tool.tox.env.coverage]
description = "generate coverage report"
skip_install = true
dependency_groups = ["coverage"]
depends = ["combine"]
commands = [
    [
        "coverage",
        { replace = "posargs", default = [
            "report",
            "--fail-under=100",
            "--show-missing",
        ], extend = true },
    ],
]

[tool.tox.env.serve]
description = "serve the application"
dependency_groups = ["dev"]
commands = [
    [
        "dotenv",
        "-f",
        ".env",
        "run",
        "granian",
        "hub_api.main:app",
        { replace = "posargs", default = [
            "--port=8000",
        ], extend = true },
    ],
]

[build-system]
requires = ["hatchling==1.27.0"]
build-backend = "hatchling.build"
