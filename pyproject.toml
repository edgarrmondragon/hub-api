[tool.poetry]
name = "hub-api"
version = "0.1.0"
description = ""
authors = ["Edgar Ramírez Mondragón <edgarrm358@gmail.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.10"
fastapi = "==0.109.2"
aiosqlite = "==0.19.0"
uvicorn = "==0.27.1"
aiofiles = { version = "==23.2.1", python = "<4" }
PyYAML = "==6.0.1"
SQLAlchemy = { version = "==2.0.27", extras = ["asyncio"] }

[tool.poetry.group.dev.dependencies]
httpx = "==0.27.0"
pytest = "==8.2.2"
pytest-asyncio = "<0.24"
requests = "==2.32.3"
types-PyYAML = "==6.0.12.20240311"

[tool.ruff]
line-length = 88
preview = true
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "COM812",
]
select = [
    "F",      # PyFlakes
    "W",      # pycodestyle (Warning)
    "E",      # pycodestyle (Error)
    "C90",    # mccabe
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "TRIO",   # flake8-trio
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "ICN",    # flake8-import-conventions
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

[tool.ruff.lint.isort]
required-imports = [
    "from __future__ import annotations",
]

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
    "sqlalchemy",
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"sqlalchemy" = "sa"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
